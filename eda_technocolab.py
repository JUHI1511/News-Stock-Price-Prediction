# -*- coding: utf-8 -*-
"""EDA_TechnoColab.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ySZXvVlyUekjusOlNO4w1pR5wjX6xdoe
"""

# Commented out IPython magic to ensure Python compatibility.
# %matplotlib inline
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns; sns.set()
from mlxtend.preprocessing import minmax_scaling

from google.colab import files
uploaded = files.upload()

import io
df=pd.read_csv('/content/upload_DJIA_table.csv',index_col='Date',parse_dates=True)

df.index

df.head()

print('Shape =', df.shape)
df.info()

df.describe()

df.corr()

"""**DATA VISUALISATION**

---

**Boxplot** to check for **outliers**
"""

df.boxplot(column=['Open'])
plt.show

df.boxplot(column=['Close'])
plt.show

df.boxplot(column=['High'])
plt.show

df.boxplot(column=['Low'])
plt.show

df.boxplot(column=['Volume'])
plt.show

df.boxplot(column=['Adj Close'])
plt.show

"""Plotting Open, Close Price and Adj Close Price 

---


"""

fig, ax = plt.subplots(figsize=(10, 10))
fig, ax1 = plt.subplots(figsize=(10, 10))
fig, ax2 = plt.subplots(figsize=(10, 10))

# Add x-axis and y-axis
ax.plot(df.index.values,
        df['Open'],
        color='purple',
        label="Open Price")

ax1.plot(df.index.values,
        df['Close'],
        color='green',
        label="Close Price")

ax2.plot(df.index.values,
        df['Adj Close'],
        color='brown',
        label="Adj Close Price")

# Set title and labels for axes
ax.set(xlabel="Year",
       ylabel="Price",
       title="Stock Price(Open)")

ax1.set(xlabel="Year",
       ylabel="Price",
       title="Stock Price(Close)")

ax2.set(xlabel="Year",
       ylabel="Price",
       title="Stock Price(Adj Close)")

ax.legend()
ax1.legend()
ax2.legend()

plt.show()

"""Plotting High and Low Price"""

fig, ax = plt.subplots(figsize=(10, 10))
fig, ax1 = plt.subplots(figsize=(10, 10))

# Add x-axis and y-axis
ax.plot(df.index.values,
        df['High'],
        color='purple',
        label="High Price")

ax1.plot(df.index.values,
        df['Low'],
        color='green',
        label="Low Price")

# Set title and labels for axes
ax.set(xlabel="Year",
       ylabel="Price",
       title="Stock Price(High)")
ax1.set(xlabel="Year",
       ylabel="Price",
       title="Stock Price(Low)")

ax.legend()
ax1.legend()

plt.show()

"""Plotting Stock Transaction Volume """

fig, ax = plt.subplots(figsize=(10, 10))

# Add x-axis and y-axis
ax.plot(df.index.values,
        df['Volume'],
        color='purple',
        label="Volume")


# Set title and labels for axes
ax.set(xlabel="Year",
       ylabel="Price",
       title="Stock Transaction Volume")

ax.legend()

plt.show()

"""Since in 2015 Transaction Volume is highest in year 2015 and 2009 so it might pe possible that stock price would either fall or rise to the extreme.Now we can see that in 2015 stock price was really high and in 2009 stock price decreased."""

df['Daily Return'] = df['Adj Close'].pct_change()

# Lets plot the daily return percentage
df['Daily Return'].plot(figsize=(12,4), legend=True, linestyle='--', marker='o')

df['Daily Return'].hist(bins=100)

"""Simple Moving Average rolling mean of our Stock price.The profit or loss calculation is usually determined by the closing price of a stock for the day, hence we will consider the closing price as the target variable."""

ax=df["Close"].plot(figsize=(12,6))
ax.autoscale(axis='both',tight=True)

df['Close :30 day  mean']=df["Close"].rolling(window=30).mean()
df.head(30)

ax=df['Close'].expanding().mean().plot(figsize=(12,5))
ax.autoscale(axis='both',tight=True)

ax=df[['Close','Close :30 day  mean']].plot(figsize=(12,5))
ax.autoscale(axis='both',tight=True)
plt.ylabel("Closing Price")
plt.title("Comparison between Close and Close:100 day mean")
plt.show()

ax=df[['Close','Close :30 day  mean']]['2016-07-01':'2016-01-20'].plot(figsize=(12,5))
ax.autoscale(axis='both',tight=True)
plt.ylabel("Price")
plt.title("Comparison between Close and Close:100 day mean in initial days")
plt.show()

"""Exponentially Weighted Moving Average is better than Simple Moving Average.It reduces lag effect and put more weights on recent values."""

df['EMWA-30']=df['Close'].ewm(span=30).mean()
df

ax=df[['Close','EMWA-30']].plot(figsize=(12,5))
ax.autoscale(axis='both',tight=True)
plt.ylabel("Price")
plt.title("Comparison between Close and Close:30 day mean in Exponential Weighted Moving Average")
plt.show()

ax=df[['Close','EMWA-30']]['2016-07-01':'2016-05-20'].plot(figsize=(12,5))
ax.autoscale(axis='both',tight=True)
plt.ylabel("Price")
plt.title("Comparison between Close and Close:30 day mean of EMWA  in initial days")
plt.show()